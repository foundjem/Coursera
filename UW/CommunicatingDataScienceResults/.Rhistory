library(stringr)
??split
?str_split
version
install.packages("nycflights13")
help(nycflights13)
library(nycflights13)
data(airlines)
View(airlines)
data(airports)
View(airports)
data(flights)
Views(flights)
View(flights)
data(planes)
View(planes)
data(weather)
View(weather)
?svd
?rownames
install.packages("devtools")
devtools::install_github("bigvis")
devtools::install_github("bigvis")
library(bigvis)
?condense
?ddply
library(plyr)
?ddply
?scale_y_continuous
library(ggplot2)
?scale_y_continuous
?commandArgs
f.of.x <- function(x) {
return((x^3) + (2 * (x ^ 2)))
}
f.of.x(2)
f.of.x(3)
compute.derivative.f.of.x <- function(x, h) {
# Return derivative using limit formulation
return((f.of.x(x + h) - f.of.x(x))/h)
}
compute.derivative.f.of.x(3, 0.0000001)
limit.derivative.f.of.x <- function(x, h) {
# Return derivative using limit formulation
return((f.of.x(x + h) - f.of.x(x))/h)
}
analytical.derivative.f.of.x(x) {
return((3 * (x ^ 2)) + (4 * x))
}
analytical.derivative.f.of.x <- function(x) {
return((3 * (x ^ 2)) + (4 * x))
}
f.of.x <- function(x) {
return((x^3) + (2 * (x ^ 2)))
}
analytical.derivative.f.of.x <- function(x) {
return((3 * (x ^ 2)) + (4 * x))
}
limit.derivative.f.of.x <- function(x, h) {
# Return derivative using limit formulation
return((f.of.x(x + h) - f.of.x(x))/h)
}
analytical.derivative.f.of.x(3)
limit.derivative.f.of.x(3, 0.001)
limit.derivative.f.of.x(3, 0.0001)
?sapply
test.values <- c(2, 3, 4)
lapply(test.values, analytical.derivative.f.of.x)
lapply(test.values, analytical.derivative.f.of.x, h = 0.001)
lapply(test.values, limit.derivative.f.of.x, h = 0.001)
lapply(test.values, limit.derivative.f.of.x, h = 0.0001)
lapply(test.values, limit.derivative.f.of.x, h = 0.00001)
f.of.x <- function(x) {
return((3 * (x ^ 2)) + (4 * x))
}
area.under.f.of.x() {
delta.x <- 0.000001
areas <- rep(0.0, 2 / delta.x)
current.x <- 1
for(i in 1:length(areas)) {
areas[i] <- f.of.x(current.x) * delta.x
current.x <- current.x + delta.x
}
return(sum(areas))
}
f.of.x <- function(x) {
return((3 * (x ^ 2)) + (4 * x))
}
area.under.f.of.x <- function(x) {
delta.x <- 0.000001
areas <- rep(0.0, 2 / delta.x)
current.x <- 1
for(i in 1:length(areas)) {
areas[i] <- f.of.x(current.x) * delta.x
current.x <- current.x + delta.x
}
return(sum(areas))
}
area.under.f.of.x()
area.under.f.of.x(0.000001)
area.under.f.of.x(0.00001)
area.under.f.of.x(0.01)
area.under.f.of.x(0.1)
area.under.f.of.x <- function(delta.x) {
areas <- rep(0.0, (2 / delta.x))
current.x <- 1
for(i in 1:length(areas)) {
areas[i] <- f.of.x(current.x) * delta.x
current.x <- current.x + delta.x
}
return(sum(areas))
}
area.under.f.of.x(0.000001)
area.under.f.of.x(0.1)
area.under.f.of.x(0.01)
test.values <_ c(0.01, 0.001, 0.000001, 0.0000001)
lapply(test.values, area.under.f.of.x)
test.values <- c(0.01, 0.001, 0.000001, 0.0000001)
lapply(test.values, area.under.f.of.x)
library(randomForest)
?predict
?predict.randomForest
?aggregate
install.packages("xtable")
install.packages("devtools")
setwd("C:/Users/dalanger/Dropbox/School/Coursera/repo/Coursera/UW/CommunicatingDataScienceResults")
seattle.data <- read.csv("seattle_incidents_summer_2014.csv", header = TRUE)
View(seattle.data)
summary(seattle.data)
str(seattle.data)
library(stringr)
help(package="stringr")
foo <- str_split(seattle.data$Occurred.Date.or.Date.Range.Start, " ")
foo
length(foo)
install.packages("lubridate")
library(lubridate)
bar <- ymd_hms(seattle.data$Occurred.Date.or.Date.Range.Start[1])
seattle.data$Occurred.Date.or.Date.Range.Start[1]
bar <- ymd_hms(as.character(seattle.data$Occurred.Date.or.Date.Range.Start[1]))
as.character(seattle.data$Occurred.Date.or.Date.Range.Start[1])
help(package = "lubridate")
seattle.data <- read.csv("seattle_incidents_summer_2014.csv", header = TRUE, stringsAsFactors = FALSE)
str(seattle.data)
summary(seattle.data)
str(seattle.data)
seattle.data$Summarized.Offense.Description <- as.factor(seattle.data$Summarized.Offense.Description)
seattle.data$Occurred.Date.or.Date.Range.Start <- str_replace_all(seattle.data$Occurred.Date.or.Date.Range.Start,
"/", "-")
View(seattle.data)
seattle.data$Date.Reported <- str_replace_all(seattle.data$Date.Reportet, "/", "-")
View(seattle.data)
seattle.data$Date.Reported <- str_replace_all(seattle.data$Date.Reported, "/", "-")
View(seattle.data)
seattle.data$Occurred.Date.Range.End <- str_replace_all(seattle.data$Occurred.Date.Range.End, "/", "-")
View(seattle.data)
foo <- ymd_hms(seattle.data$Date.Reported)
?ymd_hms
seattle.data <- read.csv("seattle_incidents_summer_2014.csv", header = TRUE, stringsAsFactors = FALSE)
View(seattle.data)
foo <- parse_date_time(seattle.data$Date.Reported, "%m/%d/%y %H:%M:%S %p")
foo[1]
foo[4]
foo <- parse_date_time(seattle.data$Date.Reported, "%m/%d/%y %H:%M:%S %p", tz = "PDT")
foo <- parse_date_time(seattle.data$Date.Reported, "%m/%d/%y %H:%M:%S %p", tz = "PST")
seattle.data$Occurred.Date.or.Date.Range.Start <- parse_date_time(seattle.data$Occurred.Date.or.Date.Range.Start, "%m/%d/%y %H:%M:%S %p")
seattle.data <- read.csv("seattle_incidents_summer_2014.csv", header = TRUE, stringsAsFactors = FALSE)
seattle.data$Date.Reported <- parse_date_time(seattle.data$Date.Reported, "%m/%d/%y %H:%M:%S %p")
seattle.data$Occurred.Date.or.Date.Range.Start <- parse_date_time(seattle.data$Occurred.Date.or.Date.Range.Start, "%m/%d/%y %H:%M:%S %p")
seattle.data$Occurred.Date.Range.End <- parse_date_time(seattle.data$Occurred.Date.Range.End, "%m/%d/%y %H:%M:%S %p")
str(seattle.data)
seattle.data <- read.csv("seattle_incidents_summer_2014.csv", header = TRUE, stringsAsFactors = FALSE)
View(seattle.data)
seattle.data <- read.csv("seattle_incidents_summer_2014.csv", header = TRUE, stringsAsFactors = FALSE)
# Set factors
seattle.data$Summarized.Offense.Description <- as.factor(seattle.data$Summarized.Offense.Description)
# Parse strings as date-time objects
seattle.data$Reported.Date.Time <- parse_date_time(seattle.data$Date.Reported, "%m/%d/%y %H:%M:%S %p")
seattle.data$Start.Date.Time <- parse_date_time(seattle.data$Occurred.Date.or.Date.Range.Start, "%m/%d/%y %H:%M:%S %p")
seattle.data$End.Date.Time <- parse_date_time(seattle.data$Occurred.Date.Range.End, "%m/%d/%y %H:%M:%S %p")
View(seattle.data)
seattle.data$Reported.Date.Time <- parse_date_time(seattle.data$Date.Reported, "%m/%d/%y %I:%M:%S %p")
seattle.data$Start.Date.Time <- parse_date_time(seattle.data$Occurred.Date.or.Date.Range.Start, "%m/%d/%y %I:%M:%S %p")
seattle.data$End.Date.Time <- parse_date_time(seattle.data$Occurred.Date.Range.End, "%m/%d/%y %I:%M:%S %p")
View(seattle.data)
portion.of.day <- function(date.time) {
current.hour <- hour(date.time)
label <- NULL
if (current.hour >= 5 && current.hour < 12) {
label <- "Morning"
} else if (current.hour >= 12 && < 6) {
label <- "Afternoon"
} else if (current.hour >= 6 && current.hour < 11) {
label <- "Evening"
} else if (current.hour >= 11 && current.hour < 5) {
label <- "Night"
}
return(label)
}
portion.of.day <- function(date.time) {
current.hour <- hour(date.time)
label <- NULL
if (current.hour >= 5 && current.hour < 12) {
label <- "Morning"
} else if (current.hour >= 12 && current.hour < 6) {
label <- "Afternoon"
} else if (current.hour >= 6 && current.hour < 11) {
label <- "Evening"
} else if (current.hour >= 11 && current.hour < 5) {
label <- "Night"
}
return(label)
}
foo <- portion.of.day(seattle.data$Start.Date.Time)
?apply
foo <- apply(seattle.data$Start.Date.Time, 1, portion.of.day)
seattle.data$Start.Date.Time <- parse_date_time(seattle.data$Occurred.Date.or.Date.Range.Start, "%m/%d/%y %I:%M:%S %p")
foo <- apply(seattle.data$Start.Date.Time, 1, portion.of.day)
foo <- apply(seattle.data$Start.Date.Time, 2, portion.of.day)
seattle.data$Start.Date.Time
dim(seattle.data$Start.Date.Time)
foo <- apply(seattle.data$Start.Date.Time, 1, portion.of.day)
foo <- apply(seattle.data[,Start.Date.Time], 1, portion.of.day)
foo <- apply(seattle.data[,"Start.Date.Time"], 1, portion.of.day)
?lapply
foo <- lapply(seattle.data[,"Start.Date.Time"], 1, portion.of.day)
foo <- lapply(seattle.data[,"Start.Date.Time"], portion.of.day)
foo <- as.factor(foo)
foo[1:10]
foo <- sapply(seattle.data[,"Start.Date.Time"], portion.of.day)
foo <- as.factor(foo)
foo <- sapply(seattle.data$Start.Date.Time, portion.of.day, simplify = "array")
rm(foo)
foo <- sapply(seattle.data$Start.Date.Time, portion.of.day, simplify = TRUE)
foo <- unlist(lapply(seattle.data$Start.Date.Time, portion.of.day, simplify = TRUE))
foo <- unlist(lapply(seattle.data$Start.Date.Time, portion.of.day))
seattle.data$Reported.Portion.Day <- as.factor(unlist(lapply(seattle.data$Reported.Date.Time, portion.of.day)))
seattle.data$Start.Portion.Day <- as.factor(unlist(lapply(seattle.data$Start.Date.Time, portion.of.day)))
seattle.data$Reported.Portion.Day <- unlist(lapply(seattle.data$Reported.Date.Time, portion.of.day))
seattle.data$Start.Portion.Day <- unlist(lapply(seattle.data$Start.Date.Time, portion.of.day))
portion.of.day <- function(date.time) {
current.hour <- hour(date.time)
label <- NULL
if (current.hour >= 5 && current.hour < 12) {
label <- "Morning"
} else if (current.hour >= 12 && current.hour < 6) {
label <- "Afternoon"
} else if (current.hour >= 6 && current.hour < 11) {
label <- "Evening"
} else if (current.hour >= 11 && current.hour < 5) {
label <- "Night"
} else {
label <- "Error"
}
return(label)
}
seattle.data$Reported.Portion.Day <- unlist(lapply(seattle.data$Reported.Date.Time, portion.of.day))
seattle.data$Start.Portion.Day <- unlist(lapply(seattle.data$Start.Date.Time, portion.of.day))
View(seattle.data)
portion.of.day <- function(date.time) {
current.hour <- hour(date.time)
label <- NULL
if (current.hour >= 5 && current.hour < 12) {
label <- "Morning"
} else if (current.hour >= 12 && current.hour < 18) {
label <- "Afternoon"
} else if (current.hour >= 18 && current.hour < 23) {
label <- "Evening"
} else if (current.hour >= 23 || current.hour < 5) {
label <- "Night"
} else {
label <- "Error"
}
return(label)
}
seattle.data$Reported.Portion.Day <- unlist(lapply(seattle.data$Reported.Date.Time, portion.of.day))
seattle.data$Start.Portion.Day <- unlist(lapply(seattle.data$Start.Date.Time, portion.of.day))
View(seattle.data)
seattle.data$Reported.Portion.Day <- as.factor(unlist(lapply(seattle.data$Reported.Date.Time, portion.of.day)))
seattle.data$Start.Portion.Day <- as.factor(unlist(lapply(seattle.data$Start.Date.Time, portion.of.day)))
ggplot(seattle.data, aes(x = Summarized.Offense.Description, fill = Start.Portion.Day)) +
geom_bar()
library(ggplot2)
ggplot(seattle.data, aes(x = Summarized.Offense.Description, fill = Start.Portion.Day)) +
geom_bar()
labels(Summarized.Offense.Description)
labels(seattle.data$Summarized.Offense.Description)
levels(seattle.data$Summarized.Offense.Description)
ggplot(seattle.data, aes(x = Start.Portion.Day)) +
geom_bar()
ggplot(seattle.data, aes(x = Start.Portion.Day, fill = Summarized.Offense.Description)) +
geom_bar()
udistrict.data <- seattle.data[which(seattle.data$District.Sector == "U"),]
unique(udistrict.data$Summarized.Offense.Description)
ggplot(seattle.data, aes(x = District.Sector)) +
geom_bar()
unique(seattle.data$Summarized.Offense.Description )
offense.violent <- function(offense) {
label <- NULL
if (offense == "WEAPON" || offense == "HOMICIDE" || offense == "ASSAULT") {
label <- "Violent"
} else {
label <- "Non-Violent"
}
return(label)
}
seattle.data$Offense.Violent <- as.factor(unlist(lapply(seattle.data$Summarized.Offense.Description, offense.violent)))
ggplot(seattle.data, aes(x = District.Sector, fill = Offense.Violent)) +
geom_bar()
offense.classification <- function(offense) {
label <- NULL
if (offense == "WEAPON" || offense == "HOMICIDE" || offense == "ASSAULT" ||
offense == "ROBBERY" || offense == "PURSE SNATCH") {
label <- "Violent"
} else if (offense == "BURGLARY" || offense == "CAR PROWL" || offense == "BURGLARY-SECURE PARKING-RES" ||
offense == "STOLEN PROPERTY" || ) {
label <- "Non-Violent"
} else if (offense == "COUNTERFEIT" || offense == "FRAUD" || offense == "FORGERY" ||
offense == "MAIL THEFT" || offesnse == "EMBEZZLE") {
label <- "White Collar"
} else if (offense == "NARCOTICS" || offense == "DUI" || offense == "LIQUOR VIOLATION") {
label <- "Substance"
} else {
label <- "Other"
}
return(label)
}
offense.classification <- function(offense) {
label <- NULL
if (offense == "WEAPON" || offense == "HOMICIDE" || offense == "ASSAULT" ||
offense == "ROBBERY" || offense == "PURSE SNATCH") {
label <- "Violent"
} else if (offense == "BURGLARY" || offense == "CAR PROWL" || offense == "BURGLARY-SECURE PARKING-RES" ||
offense == "STOLEN PROPERTY") {
label <- "Non-Violent"
} else if (offense == "COUNTERFEIT" || offense == "FRAUD" || offense == "FORGERY" ||
offense == "MAIL THEFT" || offesnse == "EMBEZZLE") {
label <- "White Collar"
} else if (offense == "NARCOTICS" || offense == "DUI" || offense == "LIQUOR VIOLATION") {
label <- "Substance"
} else {
label <- "Other"
}
return(label)
}
seattle.data$Offense.Classification <- as.factor(unlist(lapply(seattle.data$Summarized.Offense.Description, offense.classification)))
offense.classification <- function(offense) {
label <- NULL
if (offense == "WEAPON" || offense == "HOMICIDE" || offense == "ASSAULT" ||
offense == "ROBBERY" || offense == "PURSE SNATCH") {
label <- "Violent"
} else if (offense == "BURGLARY" || offense == "CAR PROWL" || offense == "BURGLARY-SECURE PARKING-RES" ||
offense == "STOLEN PROPERTY") {
label <- "Non-Violent"
} else if (offense == "COUNTERFEIT" || offense == "FRAUD" || offense == "FORGERY" ||
offense == "MAIL THEFT" || offense == "EMBEZZLE") {
label <- "White Collar"
} else if (offense == "NARCOTICS" || offense == "DUI" || offense == "LIQUOR VIOLATION") {
label <- "Substance"
} else {
label <- "Other"
}
return(label)
}
seattle.data$Offense.Classification <- as.factor(unlist(lapply(seattle.data$Summarized.Offense.Description, offense.classification)))
udistrict.data <- seattle.data[which(seattle.data$District.Sector == "U"),]
ggplot(seattle.data, aes(x = District.Sector, fill = Offense.Classification)) +
geom_bar()
offense.classification <- function(offense) {
label <- NULL
if (offense == "WEAPON" || offense == "HOMICIDE" || offense == "ASSAULT" ||
offense == "ROBBERY" || offense == "PURSE SNATCH") {
label <- "Violent"
} else if (offense == "BURGLARY" || offense == "CAR PROWL" || offense == "BURGLARY-SECURE PARKING-RES" ||
offense == "STOLEN PROPERTY" || offense == "SHOPLIFTING" || offense == "THEFT OF SERVICE" ||
offense == "OTHER PROPERTY" || offense == "PICKPOCKET" || offense == "VEHICLE THEFT" ||
offense == "BIKE THEFT") {
label <- "Property"
} else if (offense == "COUNTERFEIT" || offense == "FRAUD" || offense == "FORGERY" ||
offense == "MAIL THEFT" || offense == "EMBEZZLE") {
label <- "White Collar"
} else if (offense == "NARCOTICS" || offense == "DUI" || offense == "LIQUOR VIOLATION") {
label <- "Substance"
} else {
label <- "Other"
}
return(label)
}
seattle.data$Offense.Classification <- as.factor(unlist(lapply(seattle.data$Summarized.Offense.Description, offense.classification)))
udistrict.data <- seattle.data[which(seattle.data$District.Sector == "U"),]
ggplot(seattle.data, aes(x = District.Sector, fill = Offense.Classification)) +
geom_bar()
property.data <- seattle.data[which(seattle.data$Offense.Classification == "Property"),]
ggplot(property.data, aes(x = District.Sector, fill = Summarized.Offense.Description)) +
geom_bar()
violent.data <- seattle.data[which(seattle.data$Offense.Classification == "Violent"),]
ggplot(violent.data, aes(x = District.Sector, fill = Summarized.Offense.Description)) +
geom_bar()
ggplot(seattle.data, (aes(x = Offense.Classification))) +
geom_bar() +
facet_wrap(~Start.Portion.Day)
ggplot(seattle.data, (aes(x = Start.Portion.Day))) +
geom_bar()
ggplot(seattle.data, (aes(x = Start.Portion.Day))) +
geom_bar()
ggplot(seattle.data, (aes(x = Offense.Classification))) +
geom_bar() +
facet_wrap(~Start.Portion.Day)
ggplot(seattle.data, (aes(x = Offense.Classification, fill = Start.Portion.Day))) +
geom_bar()
library(qcc)
?xtabs
?table
assaults.data <- seattle.data[which(seattle.data$Summarized.Offense.Description == "ASSAULT"),]
table(assaults.data$Month)
ggplot(seattle.data, (aes(x = Offense.Classification, fill = Start.Portion.Day))) +
geom_bar() +
facet_wrap(~Month)
ggplot(seattle.data, (aes(x = Start.Portion.Day))) +
geom_bar() +
facet_wrap(~Month)
seattle.data$Start.Hour <- hour(seattle.data$Start.Date.Time)
View(seattle.data)
?aggregate
table(seattle.data$Start.Hour)
assaults.data <- seattle.data[which(seattle.data$Summarized.Offense.Description == "ASSAULT"),]
foo <- table(assaults.data$Month)
foo
foo <- table(assaults.data$Hour)
foo
assaults.data <- seattle.data[which(seattle.data$Summarized.Offense.Description == "ASSAULT"),]
foo <- table(assaults.data$Hour)
assaults.data <- seattle.data[which(seattle.data$Summarized.Offense.Description == "ASSAULT"),]
foo <- table(assaults.data$Start.Hour)
plot(foo)
qplot(foo)
?group
name(foo)
names(foo)
ggplot(NULL, aes(x = names(foo), y = foo)) +
geom_line()
ggplot(NULL, aes(x = names(foo), y = as.integer(foo))) +
geom_line()
ggplot(NULL, aes(x = names(foo), y = as.integer(foo))) +
geom_point()
?geom_point()
ggplot(NULL, aes(x = as.integer(names(foo)), y = as.integer(foo))) +
geom_point()
ggplot(NULL, aes(x = as.integer(names(foo)), y = as.integer(foo))) +
geom_line()
ggplot(NULL, aes(x = as.integer(names(foo)), y = as.integer(foo))) +
geom_point() +
geom_line()
qcc(as.integer(foo), type = "xbar.one", plot = TRUE, nsigmas = 3,
labels = names(foo), data.name = "Assaults by Hour of Day - 3 Sigmas")
library(plyr)
bar <- ddply(assaults.data, c("Month", "Hour"), nrow)
bar <- ddply(assaults.data, c("Month", "Start.Hour"), nrow)
View(bar)
ggplot(bar, aes(x = Start.Hour, y = V1, group = Month, color = Month)) +
geom_point() +
geom_line()
bar <- ddply(assaults.data, c("Month", "Start.Hour"), nrow)
bar$Month <- as.factor(bar$Month)
ggplot(bar, aes(x = Start.Hour, y = V1, group = Month, color = Month)) +
geom_point() +
geom_line()
ggplot(bar, aes(x = Start.Hour, y = V1, group = Month, color = Month)) +
geom_point(size=4, shape=21, fill="white") +
geom_line()
ggplot(bar, aes(x = Start.Hour, y = V1, group = Month, color = Month)) +
geom_line() +
geom_point(size=4, shape=21, fill="white")
ggplot(bar, aes(x = Month)) +
geom_bar()
table(bar$Month)
ggplot(assaults.data, aes(x = Month)) +
geom_bar()
ggplot(assaults.data, aes(x = as.factor(Month)) +
geom_bar()
ggplot(assaults.data, aes(x = as.factor(Month))) +
geom_bar()
ggplot(assaults.data, aes(x = as.factor(Month))) +
geom_bar()
ggplot(assaults.data, aes(x = as.factor(Month))) +
geom_bar()
ggplot(bar, aes(x = Start.Hour, y = V1, group = Month, color = Month)) +
geom_line() +
geom_point(size=4, shape=21, fill="white")
ggplot(assaults.data, aes(x = Start.Portion.Day)) +
geom_bar()
ggplot(assaults.data, aes(x = Start.Portion.Day)) +
geom_bar()
ggplot(bar, aes(x = Start.Hour, y = V1, group = Month, color = Month)) +
geom_line() +
geom_point(size=4, shape=21, fill="white")
